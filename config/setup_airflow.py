from airflow.models import Pool, Variable, Connection
from airflow.settings import Session
from sqlalchemy.exc import IntegrityError

def setup_pools(session):
    """T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c√°c pools trong m·ªôt session c√≥ s·∫µn."""
    print("--- Setting up Pools ---")
    pools_config = [
        {'pool': 'default_pool', 'slots': 128, 'description': 'Default pool', 'include_deferred': False},
        {'pool': 'db_pool', 'slots': 5, 'description': 'Pool for database connections', 'include_deferred': False},
        {'pool': 'crawl_pool', 'slots': 10, 'description': 'Pool for crawling tasks', 'include_deferred': False}
    ]
    
    for pool_config in pools_config:
        pool_name = pool_config['pool']
        existing_pool = session.query(Pool).filter(Pool.pool == pool_name).first()
        
        if existing_pool:
            print(f"Updating pool: {pool_name}")
            existing_pool.slots = pool_config['slots']
            existing_pool.description = pool_config['description']
            existing_pool.include_deferred = pool_config['include_deferred']
        else:
            print(f"Creating pool: {pool_name}")
            new_pool = Pool(**pool_config)
            session.add(new_pool)

def setup_connections(session):
    """T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c√°c connections trong m·ªôt session c√≥ s·∫µn."""
    print("--- Setting up Connections ---")
    
    conn_id_to_create = "postgres_prod_db"
    conn_uri = "postgresql+psycopg2://postgres_user:postgres_password@postgres_db:5432/prod_db"
    
    # Logic "Delete and Create" ƒë·ªÉ ƒë·∫£m b·∫£o lu√¥n c·∫≠p nh·∫≠t ƒë√∫ng
    existing_conn = session.query(Connection).filter(Connection.conn_id == conn_id_to_create).first()
    if existing_conn:
        print(f"Deleting existing connection: {conn_id_to_create}")
        session.delete(existing_conn)
        # Commit ngay ƒë·ªÉ ƒë·∫£m b·∫£o vi·ªác x√≥a th√†nh c√¥ng tr∆∞·ªõc khi t·∫°o l·∫°i
        # ƒêi·ªÅu n√†y tr√°nh l·ªói "unique constraint" n·∫øu script ch·∫°y l·∫°i
        session.commit() 
    
    print(f"Creating connection: {conn_id_to_create}")
    new_conn = Connection(conn_id=conn_id_to_create, uri=conn_uri)
    session.add(new_conn)


def setup_variables(session):
    """T·∫°o ho·∫∑c c·∫≠p nh·∫≠t c√°c variables trong m·ªôt session c√≥ s·∫µn."""
    print("--- Setting up Variables ---")
    variables_config = {
        'tiki_batch_size': '20',
        'tiki_max_parallel': '5',
    }
    
    for key, value in variables_config.items():
        # D√πng set() c·ªßa Variable class, kh√¥ng c·∫ßn session
        Variable.set(key, value)
        print(f"Set variable: {key} = {value}")


if __name__ == "__main__":
    print("üöÄ Starting Airflow setup...")
    
    # T·∫°o m·ªôt session duy nh·∫•t ƒë·ªÉ d√πng cho t·∫•t c·∫£ c√°c h√†m
    db_session = Session()

    try:
        setup_pools(db_session)
        setup_connections(db_session)
        
        # Commit t·∫•t c·∫£ c√°c thay ƒë·ªïi t·ª´ pools v√† connections
        db_session.commit()
        
        # Variables c√≥ c∆° ch·∫ø ri√™ng, kh√¥ng c·∫ßn session.commit()
        setup_variables(db_session)
        
        print("‚úÖ Setup completed successfully!")

    except Exception as e:
        print(f"‚ùå An error occurred during setup: {e}")
        db_session.rollback() # Ho√†n t√°c t·∫•t c·∫£ thay ƒë·ªïi n·∫øu c√≥ l·ªói
        raise # N√©m l·ªói ra ƒë·ªÉ container bi·∫øt l√† ƒë√£ th·∫•t b·∫°i
    finally:
        db_session.close() # Lu√¥n ƒë√≥ng session sau khi xong